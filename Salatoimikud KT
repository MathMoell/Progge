import tkinter as tk
from tkinter import messagebox, filedialog
import csv
from PIL import Image, ImageTk
import os

class Salatoimik:
    def __init__(self, nimi, isikukood, synniaeg, sugu, info, pilt=None):
        self.nimi = nimi
        self.isikukood = isikukood
        self.synniaeg = synniaeg
        self.sugu = sugu
        self.info = info
        self.pilt = pilt

class SalatoimikuteHaldur:
    def __init__(self, root):
        self.root = root
        self.root.title("Salatoimikute Haldamine")

        self.andmebaas = []

        self.loetelu = tk.Listbox(root, width=50)
        self.loetelu.pack(pady=10)

        self.loetelu.bind("<<ListboxSelect>>", self.loetelu_valitud)

        raam = tk.Frame(root)
        raam.pack(pady=20)

        tk.Label(raam, text="Nimi:").grid(row=0, column=0, sticky="e")
        tk.Label(raam, text="Sünniaeg:").grid(row=1, column=0, sticky="e")
        tk.Label(raam, text="Sugu:").grid(row=2, column=0, sticky="e")
        tk.Label(raam, text="Info:").grid(row=3, column=0, sticky="e")
        tk.Label(raam, text="Pilt:").grid(row=4, column=0, sticky="e")

        self.nimi_sisend = tk.Entry(raam)
        self.nimi_sisend.grid(row=0, column=1)
        self.synniaeg_sisend = tk.Entry(raam)
        self.synniaeg_sisend.grid(row=1, column=1)
        self.sugu_sisend = tk.StringVar()
        tk.Radiobutton(raam, text="Mees", variable=self.sugu_sisend, value="Mees").grid(row=2, column=1)
        tk.Radiobutton(raam, text="Naine", variable=self.sugu_sisend, value="Naine").grid(row=2, column=2)
        self.info_sisend = tk.Text(raam, width=30, height=4)
        self.info_sisend.grid(row=3, column=1)
        self.pilt_sisend = tk.Entry(raam)
        self.pilt_sisend.grid(row=4, column=1)
        self.lisa_pilt_nupp = tk.Button(raam, text="Lisa Pilt", command=self.lisa_pilt)
        self.lisa_pilt_nupp.grid(row=4, column=2)

        self.ava_pilt_nupp = tk.Button(raam, text="Ava Pilt", command=self.ava_pilt, state=tk.DISABLED)
        self.ava_pilt_nupp.grid(row=4, column=3)

        self.lisa_nupp = tk.Button(raam, text="Lisa", command=self.lisa_andmed)
        self.lisa_nupp.grid(row=5, column=0, columnspan=2, pady=10)

        self.muuda_nupp = tk.Button(raam, text="Muuda", command=self.muuda_andmed)
        self.muuda_nupp.grid(row=6, column=0, pady=5)

        self.kustuta_nupp = tk.Button(raam, text="Kustuta", command=self.kustuta_andmed)
        self.kustuta_nupp.grid(row=6, column=1, pady=5)

        self.muuda_rezhiim = False

        self.loe_andmed()

    def lisa_andmed(self):
        nimi = self.nimi_sisend.get()
        synniaeg = self.synniaeg_sisend.get()
        sugu = self.sugu_sisend.get()
        info = self.info_sisend.get(1.0, tk.END)
        pilt = self.pilt_sisend.get()

        if nimi and synniaeg and sugu and info:
            self.andmebaas.append(Salatoimik(nimi, "", synniaeg, sugu, info, pilt))
            self.nimi_sisend.delete(0, tk.END)
            self.synniaeg_sisend.delete(0, tk.END)
            self.sugu_sisend.set("")
            self.info_sisend.delete(1.0, tk.END)
            self.pilt_sisend.delete(0, tk.END)

            self.salvesta_andmed()
            self.uuenda_loetelu()
        else:
            messagebox.showwarning("Tähelepanu!", "Palun täida kõik väljad!")

    def muuda_andmed(self):
        valitud_indeks = self.loetelu.curselection()
        if valitud_indeks:
            valitud_indeks = valitud_indeks[0]
            nimi = self.nimi_sisend.get()
            synniaeg = self.synniaeg_sisend.get()
            sugu = self.sugu_sisend.get()
            info = self.info_sisend.get(1.0, tk.END)
            pilt = self.pilt_sisend.get()

            if nimi and synniaeg and sugu and info:
                self.andmebaas[valitud_indeks] = Salatoimik(nimi, "", synniaeg, sugu, info, pilt)
                self.nimi_sisend.delete(0, tk.END)
                self.synniaeg_sisend.delete(0, tk.END)
                self.sugu_sisend.set("")
                self.info_sisend.delete(1.0, tk.END)
                self.pilt_sisend.delete(0, tk.END)

                self.muuda_rezhiim = False
                self.muuda_nupp.config(text="Muuda")
                self.salvesta_andmed()
                self.uuenda_loetelu()
            else:
                messagebox.showwarning("Tähelepanu!", "Palun täida kõik väljad!")

    def kustuta_andmed(self):
        valitud_indeks = self.loetelu.curselection()
        if valitud_indeks:
            valitud_indeks = valitud_indeks[0]
            del self.andmebaas[valitud_indeks]
            self.uuenda_loetelu()
            self.salvesta_andmed()
        else:
            messagebox.showwarning("Tähelepanu!", "Palun valige kustutatav kirje!")

    def lisa_pilt(self):
        piltitee = filedialog.askopenfilename()
        self.pilt_sisend.delete(0, tk.END)
        self.pilt_sisend.insert(tk.END, piltitee)

    def ava_pilt(self):
        valitud_indeks = self.loetelu.curselection()
        if valitud_indeks:
            valitud_indeks
            valitud_indeks = valitud_indeks[0]
            piltitee = self.andmebaas[valitud_indeks].pilt
            if piltitee:
                if os.path.exists(piltitee):
                    piltaken = tk.Toplevel()
                    piltaken.title("Isiku Pilt")
                    piltaken.geometry("300x300")

                    pilt = Image.open(piltitee)
                    pilt = pilt.resize((250, 250))
                    pilt = ImageTk.PhotoImage(pilt)
                    label = tk.Label(piltaken, image=pilt)
                    label.image = pilt
                    label.pack()
                else:
                    messagebox.showerror("Viga", "Pilti ei leitud!")
            else:
                messagebox.showerror("Viga", "Pilti ei leitud!")

    def loetelu_valitud(self, event):
        valitud_indeks = self.loetelu.curselection()
        if valitud_indeks:
            valitud_indeks = valitud_indeks[0]
            valitud_salatoimik = self.andmebaas[valitud_indeks]
            self.nimi_sisend.delete(0, tk.END)
            self.nimi_sisend.insert(tk.END, valitud_salatoimik.nimi)
            self.synniaeg_sisend.delete(0, tk.END)
            self.synniaeg_sisend.insert(tk.END, valitud_salatoimik.synniaeg)
            self.sugu_sisend.set(valitud_salatoimik.sugu)
            self.info_sisend.delete(1.0, tk.END)
            self.info_sisend.insert(tk.END, valitud_salatoimik.info)
            self.pilt_sisend.delete(0, tk.END)
            self.pilt_sisend.insert(tk.END, valitud_salatoimik.pilt)
            self.muuda_nupp.config(state=tk.NORMAL)
            self.ava_pilt_nupp.config(state=tk.NORMAL)

    def uuenda_loetelu(self):
        self.loetelu.delete(0, tk.END)
        for salatoimik in self.andmebaas:
            self.loetelu.insert(tk.END, salatoimik.nimi)

    def loe_andmed(self):
        try:
            with open("salatoimikud.csv", "r", newline="") as fail:
                lugeja = csv.reader(fail)
                for rida in lugeja:
                    self.andmebaas.append(Salatoimik(*rida))
            self.uuenda_loetelu()
        except FileNotFoundError:
            messagebox.showerror("Viga", "Andmefaili ei leitud!")

    def salvesta_andmed(self):
        with open("salatoimikud.csv", "w", newline="") as fail:
            kirjutaja = csv.writer(fail)
            for salatoimik in self.andmebaas:
                kirjutaja.writerow([salatoimik.nimi, salatoimik.isikukood, salatoimik.synniaeg, salatoimik.sugu, salatoimik.info, salatoimik.pilt])

if __name__ == "__main__":
    root = tk.Tk()
    app = SalatoimikuteHaldur(root)
    root.mainloop()
